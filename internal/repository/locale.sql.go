// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: locale.sql

package repository

import (
	"context"
)

const findLocale = `-- name: FindLocale :one
SELECT
    locale.id, locale.name, locale.locale,
    locale_rels.path, locale_rels.recipes_id, locale_rels.features_id
FROM locale
         INNER JOIN locale_rels
                    ON locale.id = locale_rels.parent_id
WHERE locale.name = $1 LIMIT 1
`

type FindLocaleRow struct {
	ID         int32            `json:"id"`
	Name       string           `json:"name"`
	Locale     EnumLocaleLocale `json:"locale"`
	Path       string           `json:"path"`
	RecipesID  *int32           `json:"recipes_id"`
	FeaturesID *int32           `json:"features_id"`
}

func (q *Queries) FindLocale(ctx context.Context, name string) (FindLocaleRow, error) {
	row := q.db.QueryRow(ctx, findLocale, name)
	var i FindLocaleRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Locale,
		&i.Path,
		&i.RecipesID,
		&i.FeaturesID,
	)
	return i, err
}

const findRecipeByLocale = `-- name: FindRecipeByLocale :one
SELECT locale_rels.recipes_id
from locale_rels
WHERE locale_rels.parent_id = $1 AND locale_rels.path = 'recipe'
LIMIT 1
`

func (q *Queries) FindRecipeByLocale(ctx context.Context, parentID int32) (*int32, error) {
	row := q.db.QueryRow(ctx, findRecipeByLocale, parentID)
	var recipes_id *int32
	err := row.Scan(&recipes_id)
	return recipes_id, err
}

const insertLocale = `-- name: InsertLocale :one
INSERT INTO locale (name, locale)
VALUES ($1, $2)
RETURNING id
`

type InsertLocaleParams struct {
	Name   string           `json:"name"`
	Locale EnumLocaleLocale `json:"locale"`
}

func (q *Queries) InsertLocale(ctx context.Context, arg InsertLocaleParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertLocale, arg.Name, arg.Locale)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertLocaleIfNotExists = `-- name: InsertLocaleIfNotExists :one
WITH ins AS (
    INSERT INTO locale (name, locale)
        SELECT $1, $2
        WHERE NOT EXISTS (
            SELECT 1 FROM locale WHERE name = $1 AND locale = $2
        )
        RETURNING id
)
SELECT id FROM ins
UNION
SELECT id FROM locale WHERE name = $1 AND locale = $2
`

type InsertLocaleIfNotExistsParams struct {
	Name   string           `json:"name"`
	Locale EnumLocaleLocale `json:"locale"`
}

func (q *Queries) InsertLocaleIfNotExists(ctx context.Context, arg InsertLocaleIfNotExistsParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertLocaleIfNotExists, arg.Name, arg.Locale)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertLocaleRel = `-- name: InsertLocaleRel :exec
INSERT INTO locale_rels (parent_id, path, recipes_id, features_id)
VALUES ($1, $2, $3, $4::int)
`

type InsertLocaleRelParams struct {
	ParentID  int32  `json:"parent_id"`
	Path      string `json:"path"`
	RecipeID  *int32 `json:"recipe_id"`
	FeatureID *int32 `json:"feature_id"`
}

func (q *Queries) InsertLocaleRel(ctx context.Context, arg InsertLocaleRelParams) error {
	_, err := q.db.Exec(ctx, insertLocaleRel,
		arg.ParentID,
		arg.Path,
		arg.RecipeID,
		arg.FeatureID,
	)
	return err
}
