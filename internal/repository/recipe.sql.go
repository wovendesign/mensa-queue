// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: recipe.sql

package repository

import (
	"context"
)

const findAllRecipes = `-- name: FindAllRecipes :many
SELECT id, ai_thumbnail_id, price_students, price_employees, price_guests, mensa_provider_id, updated_at, created_at FROM recipes
`

func (q *Queries) FindAllRecipes(ctx context.Context) ([]Recipe, error) {
	rows, err := q.db.Query(ctx, findAllRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Recipe
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.AiThumbnailID,
			&i.PriceStudents,
			&i.PriceEmployees,
			&i.PriceGuests,
			&i.MensaProviderID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRecipe = `-- name: InsertRecipe :one
INSERT INTO recipes (price_students, price_employees, price_guests, mensa_provider_id)
VALUES ($2::float8, $3::float8, $4::float8, $1)
RETURNING id
`

type InsertRecipeParams struct {
	MensaProviderID int32   `json:"mensa_provider_id"`
	PriceStudents   float64 `json:"price_students"`
	PriceEmployees  float64 `json:"price_employees"`
	PriceGuests     float64 `json:"price_guests"`
}

func (q *Queries) InsertRecipe(ctx context.Context, arg InsertRecipeParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertRecipe,
		arg.MensaProviderID,
		arg.PriceStudents,
		arg.PriceEmployees,
		arg.PriceGuests,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
