// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: serving.sql

package repository

import (
	"context"
	"time"
)

const findServing = `-- name: FindServing :one
SELECT id
FROM servings
WHERE recipe_id = $1 AND date = $2::timestamptz AND mensa_id = $3
LIMIT 1
`

type FindServingParams struct {
	RecipeID int32     `json:"recipe_id"`
	Date     time.Time `json:"date"`
	MensaID  *int32    `json:"mensa_id"`
}

func (q *Queries) FindServing(ctx context.Context, arg FindServingParams) (int32, error) {
	row := q.db.QueryRow(ctx, findServing, arg.RecipeID, arg.Date, arg.MensaID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertServing = `-- name: InsertServing :execrows
INSERT INTO servings (recipe_id, date, mensa_id)
SELECT $1, $2::timestamptz, $3
    WHERE NOT EXISTS (
    SELECT 1 FROM servings
    WHERE recipe_id = $1 AND date = $2::timestamptz AND mensa_id = $3
)
`

type InsertServingParams struct {
	RecipeID int32     `json:"recipe_id"`
	Date     time.Time `json:"date"`
	MensaID  *int32    `json:"mensa_id"`
}

func (q *Queries) InsertServing(ctx context.Context, arg InsertServingParams) (int64, error) {
	result, err := q.db.Exec(ctx, insertServing, arg.RecipeID, arg.Date, arg.MensaID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
