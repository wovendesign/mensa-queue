// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feature.sql

package repository

import (
	"context"
)

const addFeatureToRecipe = `-- name: AddFeatureToRecipe :exec
INSERT INTO recipes_rels (parent_id, features_id, path)
SELECT $1, $2, 'feature'
WHERE NOT EXISTS (
    SELECT 1 FROM recipes_rels WHERE parent_id = $1 AND features_id = $2
)
`

type AddFeatureToRecipeParams struct {
	ParentID   int32  `json:"parent_id"`
	FeaturesID *int32 `json:"features_id"`
}

func (q *Queries) AddFeatureToRecipe(ctx context.Context, arg AddFeatureToRecipeParams) error {
	_, err := q.db.Exec(ctx, addFeatureToRecipe, arg.ParentID, arg.FeaturesID)
	return err
}

const insertFeature = `-- name: InsertFeature :one
INSERT INTO features (visible_small)
VALUES (false)
RETURNING id
`

func (q *Queries) InsertFeature(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, insertFeature)
	var id int32
	err := row.Scan(&id)
	return id, err
}
