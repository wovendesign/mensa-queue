// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EnumLocaleLocale string

const (
	EnumLocaleLocaleDe EnumLocaleLocale = "de"
	EnumLocaleLocaleEn EnumLocaleLocale = "en"
)

func (e *EnumLocaleLocale) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnumLocaleLocale(s)
	case string:
		*e = EnumLocaleLocale(s)
	default:
		return fmt.Errorf("unsupported scan type for EnumLocaleLocale: %T", src)
	}
	return nil
}

type NullEnumLocaleLocale struct {
	EnumLocaleLocale EnumLocaleLocale `json:"enum_locale_locale"`
	Valid            bool             `json:"valid"` // Valid is true if EnumLocaleLocale is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnumLocaleLocale) Scan(value interface{}) error {
	if value == nil {
		ns.EnumLocaleLocale, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnumLocaleLocale.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnumLocaleLocale) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnumLocaleLocale), nil
}

type EnumServingTimeDay string

const (
	EnumServingTimeDayMonday    EnumServingTimeDay = "monday"
	EnumServingTimeDayTuesday   EnumServingTimeDay = "tuesday"
	EnumServingTimeDayWednesday EnumServingTimeDay = "wednesday"
	EnumServingTimeDayThursday  EnumServingTimeDay = "thursday"
	EnumServingTimeDayFriday    EnumServingTimeDay = "friday"
	EnumServingTimeDaySaturday  EnumServingTimeDay = "saturday"
	EnumServingTimeDaySunday    EnumServingTimeDay = "sunday"
)

func (e *EnumServingTimeDay) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnumServingTimeDay(s)
	case string:
		*e = EnumServingTimeDay(s)
	default:
		return fmt.Errorf("unsupported scan type for EnumServingTimeDay: %T", src)
	}
	return nil
}

type NullEnumServingTimeDay struct {
	EnumServingTimeDay EnumServingTimeDay `json:"enum_serving_time_day"`
	Valid              bool               `json:"valid"` // Valid is true if EnumServingTimeDay is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnumServingTimeDay) Scan(value interface{}) error {
	if value == nil {
		ns.EnumServingTimeDay, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnumServingTimeDay.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnumServingTimeDay) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnumServingTimeDay), nil
}

type Locales string

const (
	LocalesDe Locales = "de"
	LocalesEn Locales = "en"
)

func (e *Locales) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Locales(s)
	case string:
		*e = Locales(s)
	default:
		return fmt.Errorf("unsupported scan type for Locales: %T", src)
	}
	return nil
}

type NullLocales struct {
	Locales Locales `json:"_locales"`
	Valid   bool    `json:"valid"` // Valid is true if Locales is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLocales) Scan(value interface{}) error {
	if value == nil {
		ns.Locales, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Locales.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLocales) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Locales), nil
}

type Additive struct {
	ID        int32              `json:"id"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type AdditivesLocale struct {
	Name     pgtype.Text `json:"name"`
	ID       int32       `json:"id"`
	Locale   Locales     `json:"_locale"`
	ParentID int32       `json:"_parent_id"`
}

type Allergen struct {
	ID        int32              `json:"id"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type AllergensLocale struct {
	Name     pgtype.Text `json:"name"`
	ID       int32       `json:"id"`
	Locale   Locales     `json:"_locale"`
	ParentID int32       `json:"_parent_id"`
}

type Feature struct {
	ID              int32              `json:"id"`
	MensaProviderID pgtype.Int4        `json:"mensa_provider_id"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

type FeaturesLocale struct {
	Name     pgtype.Text `json:"name"`
	ID       int32       `json:"id"`
	Locale   Locales     `json:"_locale"`
	ParentID int32       `json:"_parent_id"`
}

type Info struct {
	ID        int32              `json:"id"`
	Title     pgtype.Text        `json:"title"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Locale struct {
	ID        int32                `json:"id"`
	Name      string               `json:"name"`
	Locale    NullEnumLocaleLocale `json:"locale"`
	UpdatedAt pgtype.Timestamptz   `json:"updated_at"`
	CreatedAt pgtype.Timestamptz   `json:"created_at"`
}

type LocaleRel struct {
	ID         int32       `json:"id"`
	Order      pgtype.Int4 `json:"order"`
	ParentID   int32       `json:"parent_id"`
	Path       string      `json:"path"`
	RecipesID  pgtype.Int4 `json:"recipes_id"`
	FeaturesID pgtype.Int4 `json:"features_id"`
}

type Medium struct {
	ID           int32              `json:"id"`
	Alt          string             `json:"alt"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	Url          pgtype.Text        `json:"url"`
	ThumbnailURL pgtype.Text        `json:"thumbnail_u_r_l"`
	Filename     pgtype.Text        `json:"filename"`
	MimeType     pgtype.Text        `json:"mime_type"`
	Filesize     pgtype.Numeric     `json:"filesize"`
	Width        pgtype.Numeric     `json:"width"`
	Height       pgtype.Numeric     `json:"height"`
	FocalX       pgtype.Numeric     `json:"focal_x"`
	FocalY       pgtype.Numeric     `json:"focal_y"`
}

type Mensa struct {
	ID                 int32              `json:"id"`
	Name               string             `json:"name"`
	Slug               pgtype.Text        `json:"slug"`
	AddressLatitude    pgtype.Numeric     `json:"address_latitude"`
	AddressLongitude   pgtype.Numeric     `json:"address_longitude"`
	AddressStreet      pgtype.Text        `json:"address_street"`
	AddressHouseNumber pgtype.Text        `json:"address_house_number"`
	AddressZipCode     pgtype.Text        `json:"address_zip_code"`
	AddressCity        pgtype.Text        `json:"address_city"`
	Description        pgtype.Text        `json:"description"`
	ProviderID         int32              `json:"provider_id"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
}

type MensaProvider struct {
	ID          int32              `json:"id"`
	Name        string             `json:"name"`
	Slug        pgtype.Text        `json:"slug"`
	Description string             `json:"description"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

type Nutrient struct {
	ID              int32              `json:"id"`
	NutrientValueID pgtype.Int4        `json:"nutrient_value_id"`
	NutrientLabelID pgtype.Int4        `json:"nutrient_label_id"`
	RecipeID        pgtype.Int4        `json:"recipe_id"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

type NutrientLabel struct {
	ID             int32              `json:"id"`
	UnitID         int32              `json:"unit_id"`
	Recommendation pgtype.Text        `json:"recommendation"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

type NutrientLabelsLocale struct {
	Name     string  `json:"name"`
	ID       int32   `json:"id"`
	Locale   Locales `json:"_locale"`
	ParentID int32   `json:"_parent_id"`
}

type NutrientUnit struct {
	ID        int32              `json:"id"`
	Name      string             `json:"name"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type NutrientValue struct {
	ID        int32              `json:"id"`
	Value     pgtype.Numeric     `json:"value"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type PayloadLockedDocument struct {
	ID         int32              `json:"id"`
	GlobalSlug pgtype.Text        `json:"global_slug"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

type PayloadLockedDocumentsRel struct {
	ID                 int32       `json:"id"`
	Order              pgtype.Int4 `json:"order"`
	ParentID           int32       `json:"parent_id"`
	Path               string      `json:"path"`
	UsersID            pgtype.Int4 `json:"users_id"`
	MediaID            pgtype.Int4 `json:"media_id"`
	MensaProviderID    pgtype.Int4 `json:"mensa_provider_id"`
	MensaID            pgtype.Int4 `json:"mensa_id"`
	ServingTimeID      pgtype.Int4 `json:"serving_time_id"`
	TimeSlotID         pgtype.Int4 `json:"time_slot_id"`
	ServingsID         pgtype.Int4 `json:"servings_id"`
	InfoID             pgtype.Int4 `json:"info_id"`
	NutrientsID        pgtype.Int4 `json:"nutrients_id"`
	NutrientUnitsID    pgtype.Int4 `json:"nutrient_units_id"`
	NutrientLabelsID   pgtype.Int4 `json:"nutrient_labels_id"`
	NutrientValuesID   pgtype.Int4 `json:"nutrient_values_id"`
	AllergensID        pgtype.Int4 `json:"allergens_id"`
	AdditivesID        pgtype.Int4 `json:"additives_id"`
	RecipesID          pgtype.Int4 `json:"recipes_id"`
	UserImageUploadsID pgtype.Int4 `json:"user_image_uploads_id"`
	FeaturesID         pgtype.Int4 `json:"features_id"`
	LocaleID           pgtype.Int4 `json:"locale_id"`
}

type PayloadMigration struct {
	ID        int32              `json:"id"`
	Name      pgtype.Text        `json:"name"`
	Batch     pgtype.Numeric     `json:"batch"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type PayloadPreference struct {
	ID        int32              `json:"id"`
	Key       pgtype.Text        `json:"key"`
	Value     []byte             `json:"value"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type PayloadPreferencesRel struct {
	ID       int32       `json:"id"`
	Order    pgtype.Int4 `json:"order"`
	ParentID int32       `json:"parent_id"`
	Path     string      `json:"path"`
	UsersID  pgtype.Int4 `json:"users_id"`
}

type Recipe struct {
	ID              int32              `json:"id"`
	AiThumbnailID   pgtype.Int4        `json:"ai_thumbnail_id"`
	PriceStudents   pgtype.Numeric     `json:"price_students"`
	PriceEmployees  pgtype.Numeric     `json:"price_employees"`
	PriceGuests     pgtype.Numeric     `json:"price_guests"`
	MensaProviderID int32              `json:"mensa_provider_id"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	CreatedAt       pgtype.Timestamptz `json:"created_at"`
}

type RecipesLocale struct {
	Name     string  `json:"name"`
	ID       int32   `json:"id"`
	Locale   Locales `json:"_locale"`
	ParentID int32   `json:"_parent_id"`
}

type RecipesRel struct {
	ID          int32       `json:"id"`
	Order       pgtype.Int4 `json:"order"`
	ParentID    int32       `json:"parent_id"`
	Path        string      `json:"path"`
	FeaturesID  pgtype.Int4 `json:"features_id"`
	AdditivesID pgtype.Int4 `json:"additives_id"`
	AllergensID pgtype.Int4 `json:"allergens_id"`
}

type Serving struct {
	ID        int32              `json:"id"`
	RecipeID  int32              `json:"recipe_id"`
	Date      pgtype.Timestamptz `json:"date"`
	MensaID   pgtype.Int4        `json:"mensa_id"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type ServingTime struct {
	ID          int32                  `json:"id"`
	MensaInfoID pgtype.Int4            `json:"mensa_info_id"`
	Day         NullEnumServingTimeDay `json:"day"`
	UpdatedAt   pgtype.Timestamptz     `json:"updated_at"`
	CreatedAt   pgtype.Timestamptz     `json:"created_at"`
}

type TimeSlot struct {
	ID            int32              `json:"id"`
	ServingTimeID pgtype.Int4        `json:"serving_time_id"`
	From          pgtype.Timestamptz `json:"from"`
	To            pgtype.Timestamptz `json:"to"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID                      int32              `json:"id"`
	UpdatedAt               pgtype.Timestamptz `json:"updated_at"`
	CreatedAt               pgtype.Timestamptz `json:"created_at"`
	Email                   string             `json:"email"`
	ResetPasswordToken      pgtype.Text        `json:"reset_password_token"`
	ResetPasswordExpiration pgtype.Timestamptz `json:"reset_password_expiration"`
	Salt                    pgtype.Text        `json:"salt"`
	Hash                    pgtype.Text        `json:"hash"`
	LoginAttempts           pgtype.Numeric     `json:"login_attempts"`
	LockUntil               pgtype.Timestamptz `json:"lock_until"`
}

type UserImageUpload struct {
	ID           int32              `json:"id"`
	ImageID      int32              `json:"image_id"`
	UniqueUserID string             `json:"unique_user_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	RecipeID     int32              `json:"recipe_id"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}
